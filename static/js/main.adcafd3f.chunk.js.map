{"version":3,"sources":["Canvas.js","serviceWorker.js","index.js"],"names":["Canvas","state","circles","bestPath","bestDistance","distance","drawing","x","y","init","ctx","this","refs","canvas","getContext","strokeStyle","beginPath","arc","Math","PI","push","fillStyle","fill","stroke","clearRect","width","height","arr","i","length","drawCircle","moveTo","lineTo","dist","sqrt","round","setState","newBest","k","slice","setTimeout","alert","newArr","ind1","floor","random","ind2","tmp1","tmp2","drawTSP","calcDistance","animateBest","best","className","ref","onClick","e","clientX","clientY","solve","reset","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.adcafd3f.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass Canvas extends React.Component {\n    state = {\n        circles : [],\n        bestPath : [],\n        bestDistance : 10000000,\n        distance : null,\n        drawing: false,\n    }\n\n    drawCircle(x, y, init=false) {\n        const ctx = this.refs.canvas.getContext('2d');\n        ctx.strokeStyle = 'black';\n        ctx.beginPath();\n        ctx.arc(x, y, 10, 0, 2 * Math.PI);\n\n        if (init)\n            this.state.circles.push([x, y]);\n        \n        ctx.fillStyle = 'red';\n        ctx.fill();\n        ctx.stroke();\n\n        //console.log(this.state.circles);\n    }\n\n    drawTSP() {\n        const canvas = this.refs.canvas;\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        const arr = this.state.circles;\n    \n        ctx.strokeStyle = 'black';\n        //console.log(\"In Draw: \" + arr);\n        for (let i = 0; i < arr.length; i++)\n        {\n            this.drawCircle(arr[i][0], arr[i][1]);\n            /*\n            ctx.beginPath();\n            ctx.arc(arr[i][0], arr[i][1], 10, 0, 2 * Math.PI);\n            ctx.fillStyle = 'red';\n            ctx.fill();\n            ctx.stroke(); \n            */\n        }\n        \n        for (let i = 0; i < arr.length - 1; i++)\n        {\n            ctx.beginPath();\n            ctx.moveTo(arr[i][0], arr[i][1]);\n            ctx.lineTo(arr[i + 1][0], arr[i + 1][1]);\n            ctx.stroke();\n        }\n    }\n\n    calcDistance() {\n        const arr = this.state.circles;\n        var dist = 0;\n\n        for (let i = 1; i < arr.length; i++) {\n            dist += Math.sqrt( (arr[i][0] - arr[i - 1][0])**2 + (arr[i][1] - arr[i - 1][1])**2 );\n        }\n\n        dist = Math.round(dist);\n        this.setState({distance : dist});\n\n        if (dist <= this.state.bestDistance) {\n            this.setState({bestDistance : dist});\n            \n            let newBest = [];\n            \n            for (let k = 0; k < arr.length; k++) {\n              newBest[k] = arr[k].slice();\n            }\n            this.setState({bestPath : newBest});\n            \n            //console.log(\"BestPath changed\");\n        }\n    }\n\n    animateBest() {\n        const canvas = this.refs.canvas;\n        const ctx = canvas.getContext(\"2d\");\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        const arr = this.state.bestPath;\n\n        for (var i = 0; i < arr.length; i++)\n        {\n            ctx.beginPath();\n            ctx.arc(arr[i][0], arr[i][1], 10, 0, 2 * Math.PI);\n            ctx.fillStyle = 'red';\n            ctx.fill();\n            ctx.stroke(); \n        }\n        \n        ctx.strokeStyle = 'red';\n        \n        //asf\n        for (let i = 0; i < arr.length - 1; i++) {\n            setTimeout(() => {\n                ctx.beginPath();\n                ctx.moveTo(arr[i][0], arr[i][1]);\n                ctx.lineTo(arr[i + 1][0], arr[i + 1][1]);\n                ctx.stroke();\n            }, 200 * i);\n        }\n    }\n\n    solve() {\n        const arr = this.state.circles;\n        this.setState({drawing : true});\n        const MAX_ITER = 100;\n\n        if (arr.length < 3)\n        {\n            alert('Place more than 2 locations to initiate pathfinding');\n            return;\n        }\n\n        let newArr = arr.slice();\n        //console.log(\"Starting??\");\n        \n        for (let i = 0; i <= MAX_ITER; i++) {\n            setTimeout(() => {\n\n                if (!this.state.drawing)\n                    return;\n                \n                var ind1 = Math.floor(Math.random() * newArr.length);\n                var ind2 = Math.floor(Math.random() * newArr.length);\n                \n                while (ind2 === ind1) {\n                    ind2 = Math.floor(Math.random() * newArr.length);\n                }\n\n                var tmp1 = newArr[ind1][0];\n                var tmp2 = newArr[ind1][1];\n\n\n                newArr[ind1][0] = newArr[ind2][0];\n                newArr[ind1][1] = newArr[ind2][1];\n\n                \n                newArr[ind2][0] = tmp1;\n                newArr[ind2][1] = tmp2;\n\n                //console.log(\"In solve(): \" + this.state.circles);\n                this.setState({circles : newArr});\n\n                this.drawTSP();\n                this.calcDistance();\n                newArr = this.state.circles.slice();\n                \n                if (i === MAX_ITER) {\n                    this.animateBest();\n                }\n\n            }, 30 * i);\n            //console.log(i);\n            \n        }\n\n    }\n\n    reset() {\n        this.setState({drawing : false});\n\n        const canvas = this.refs.canvas;\n        const ctx = canvas.getContext(\"2d\");\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n        this.setState({circles : []});\n        this.setState({bestDistance: 10000000});\n        this.setState({distance: null});\n        this.setState({drawing: false});\n    }\n\n    render() {\n        var best;\n\n        if (this.state.bestDistance === 10000000){\n            best = \"\";\n        }\n        else {\n            best = this.state.bestDistance;\n        }\n\n        return (\n            <div className=\"container\">\n                <div>\n                    <canvas ref=\"canvas\" width={1000} height={1000}\n                            onClick={(e) => this.drawCircle(e.clientX, e.clientY, true)}\n                    />\n\n                    \n                </div>\n\n                <p className=\"scoreboard\">Current Distance: {this.state.distance}</p>\n                <p className=\"scoreboard\">Best Distance: {best}</p>\n\n                <div>\n                    <button className=\"btn\" onClick={() => this.solve()}>Solve</button>\n                    <button className=\"btn\" onClick={() => this.reset()}>Reset</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Canvas;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Canvas from './Canvas';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Canvas />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}