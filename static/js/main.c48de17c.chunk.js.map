{"version":3,"sources":["Animations/drawCircle.js","Animations/clearCanvas.js","Animations/drawTSP.js","Animations/animateBestPath.js","Algorithms/findMinMax.js","Algorithms/scaleList.js","Animations/animatePath.js","Algorithms/copyList.js","Algorithms/calcDistance.js","Algorithms/swap.js","Algorithms/random.js","Algorithms/acceptanceProbability.js","Algorithms/simulatedAnnealing.js","Algorithms/Genetic_Algorithm/shuffle.js","Algorithms/Genetic_Algorithm/Path.js","Algorithms/Genetic_Algorithm/Population.js","Algorithms/Genetic_Algorithm/pickOne.js","Algorithms/Genetic_Algorithm/GA.js","Modal.js","App.js","index.js"],"names":["drawCircle","canvasRef","x","y","ctx","getContext","strokeStyle","beginPath","arc","Math","PI","fillStyle","fill","stroke","clearCanvas","canvas","clearRect","width","height","drawTSP","path","arr","i","length","moveTo","lineTo","animateBestPath","doneDrawing","deltaTime","setTimeout","findMinMax","list","min","max","scaleList","canvasHeight","scaleFactor","console","log","scaledList","push","animatePath","canvas2Ref","paths","distances","updateDistances","currentDistance","bestDistance","ctx2","invalidGraph","minDist","maxDist","scaledValues","delX","currentX","copyList","listCopy","tmpPoint","j","calcDistance","distance","sqrt","round","swap","ind1","floor","random","ind2","tmpX","tmpY","circles","iterations","MAX_ITER","pathList","bestPath","distanceList","tmpPath","acceptanceProbability","currentEnergy","newEnergy","temperature","exp","simulatedAnnealing","T","currentPath","bestEnergy","newPath","shuffle","swapInd","tmp","Path","pathCopy","this","calcFitness","fitness","Population","fittest","fittestValue","sum","pickOne","index","r","GA","eliteOffset","population","normalizeFitness","sortByFitness","generations","bestEverDist","bestEverPath","bestDist","curDist","nextGeneration","newPopulation","order","orderTwo","crossOver","orderA","orderB","cross","visited","Set","add","has","tmpFitness","modalRoot","document","getElementById","Modal","ReactDOM","createPortal","style","position","top","bottom","left","right","display","justifyContent","alignItems","backgroundColor","padding","background","borderRadius","minHeight","margin","minWidth","boxShadow","justifySelf","props","statement","onClick","onClose","React","Component","App","state","drawing","showTutorial","setDistances","setState","closeTutorial","circlesCopy","slice","refs","canvas2","alert","algorithm","evole","best","className","ref","e","addCircle","clientX","clientY","id","selectAlgorithm","resetState","render"],"mappings":"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","file":"static/js/main.c48de17c.chunk.js","sourcesContent":["const drawCircle = (canvasRef, x, y) => {\n    const canvas = canvasRef;\n    const ctx = canvas.getContext('2d');\n\n    ctx.strokeStyle = 'black';\n    ctx.beginPath();\n    ctx.arc(x, y, 10, 0, 2 * Math.PI);\n\n    ctx.fillStyle = 'red';\n    ctx.fill();\n    ctx.stroke();\n}\n\nexport default drawCircle;","const clearCanvas = (canvasRef) => {\n    const canvas = canvasRef;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n}\n\nexport default clearCanvas;","import drawCircle from './drawCircle'\nimport clearCanvas from './clearCanvas'\n\nconst drawTSP = (canvasRef, path) => {\n    const canvas = canvasRef;\n    const ctx = canvas.getContext('2d');\n    const arr = path;\n\n    clearCanvas(canvas);\n\n    ctx.strokeStyle = 'black';\n\n    for (let i = 0; i < arr.length; i++){\n        drawCircle(canvas, arr[i][0], arr[i][1]);\n    }\n\n    for (let i = 0; i < arr.length - 1; i++){\n        ctx.beginPath();\n        ctx.moveTo(arr[i][0], arr[i][1]);\n        ctx.lineTo(arr[i + 1][0], arr[i + 1][1]);\n        ctx.stroke();\n    }\n}\n\nexport default drawTSP;","import drawCircle from './drawCircle'\nimport clearCanvas from './clearCanvas'\n\nconst animateBestPath = (canvasRef, path, doneDrawing) => {\n    const canvas = canvasRef;\n    const ctx = canvas.getContext('2d');\n    const arr = path;\n\n    clearCanvas(canvas);\n\n    let deltaTime = 2000 / arr.length;\n\n    for (let i = 0; i < arr.length; i++){\n        drawCircle(canvas, arr[i][0], arr[i][1]);\n    }\n\n    ctx.strokeStyle = 'red';\n\n    for (let i = 0; i < arr.length - 1; i++) {\n        setTimeout(() => {\n            ctx.beginPath();\n            ctx.moveTo(arr[i][0], arr[i][1]);\n            ctx.lineTo(arr[i + 1][0], arr[i + 1][1]);\n            ctx.stroke();\n\n            if (i === arr.length - 2) {\n                doneDrawing();\n            }\n        }, deltaTime * i);\n    }\n\n    \n}\n\n\nexport default animateBestPath;","const findMinMax = (list) => {\n    let min = list[0];\n    let max = list[0];\n\n    for (let i = 1; i < list.length; i++) {\n        if (list[i] > max) {\n            max = list[i];\n        }\n\n        if (list[i] < min) {\n            min = list[i];\n        }\n    }\n\n    return [min, max];\n}\n\nexport default findMinMax;","const scaleList = (list, min, max, canvasHeight) => {\n    let scaleFactor = canvasHeight / (max - min);\n    console.log(scaleFactor);\n    let scaledList = [];\n\n    for (let i = 0; i < list.length; i++) {\n        scaledList.push((list[i] - min) * scaleFactor);\n        scaledList[i] = canvasHeight - scaledList[i];\n    }\n\n    return scaledList;\n}\n\nexport default scaleList;","import drawTSP from './drawTSP'\nimport animateBestPath from './animateBestPath'\nimport findMinMax from './../Algorithms/findMinMax'\nimport scaleList from './../Algorithms/scaleList'\n\nconst animatePath = (canvasRef, canvas2Ref, paths, distances, updateDistances, doneDrawing) => {\n    const canvas = canvasRef;\n    const path = paths;\n    const canvasHeight = 720;\n    const canvasWidth = 900;\n    var currentDistance;\n    var bestDistance = -1;\n\n    const ctx2 = canvas2Ref.getContext('2d');\n\n    var invalidGraph = false;\n    let [minDist, maxDist] = findMinMax(distances);\n    //Add edge case if minDist === maxDist\n\n    if (minDist !== maxDist) {\n        var scaledValues = scaleList(distances, minDist, maxDist, canvasHeight);\n    }\n    else {\n        invalidGraph = true;\n    }\n    \n    console.log(distances);\n    console.log(scaledValues);\n\n    const delX = canvasWidth / (distances.length - 1);\n\n    let currentX = 0;\n\n    /**\n     * Time = path.length * deltaTime, set Time = 3000ms:\n     * deltaTime = 3000 / path.length\n     */\n    let deltaTime = 3000 / path.length;\n\n    for (let i = 0; i < path.length; i++) {\n        setTimeout(() => {\n            currentDistance = distances[i];\n\n            if (i !== path.length - 1) {\n                drawTSP(canvas, path[i]);\n                \n                if (bestDistance < 0 || bestDistance > distances[i]) {\n                    bestDistance = distances[i];\n                }\n            }\n            else {\n                animateBestPath(canvas, path[i], doneDrawing);\n            }\n\n            if (!invalidGraph) {\n                if (scaledValues[i] === canvasHeight) {\n                    scaledValues[i] -= 3; //keep it visible\n                }\n\n                if (i === 0) {\n                    ctx2.beginPath();\n                    ctx2.moveTo(currentX, scaledValues[0]);\n                }\n                else {\n                    ctx2.lineTo(currentX, scaledValues[i]);\n                    ctx2.stroke();\n                }\n            }\n            else {\n                if (i === 0) {\n                    ctx2.beginPath();\n                    ctx2.moveTo(currentX, 250);\n                }\n                else {\n                    ctx2.lineTo(currentX, 250);\n                    ctx2.stroke();\n                }\n            }\n            \n\n            currentX += delX;\n\n            updateDistances(currentDistance, bestDistance);\n        }, i * deltaTime);\n    }\n}\n\nexport default animatePath;","function copyList(list) {\n    let listCopy = [];\n\n    for (let i = 0; i < list.length; i++) {\n        let tmpPoint = [];\n\n        for (let j = 0; j < list[i].length; j++) {\n            tmpPoint.push(list[i][j]);\n        }\n\n        listCopy.push(tmpPoint);\n    }\n    \n    return listCopy;\n}\n\nexport default copyList;","const calcDistance = (path) => {\n    let distance = 0;\n    const arr = path;\n\n    for (let i = 1; i < path.length; i++) {\n        distance += Math.sqrt( (arr[i][0] - arr[i - 1][0])**2 + (arr[i][1] - arr[i - 1][1])**2 );\n    }\n\n    distance = Math.round(distance);\n\n    return distance;\n}\n\nexport default calcDistance;","const swap = (list) => {\n\n    if (list.length < 2) {\n        return;\n    }\n\n    let ind1 = Math.floor(Math.random() * list.length);\n    let ind2 = Math.floor(Math.random() * list.length);\n    \n    while (ind2 === ind1) {\n        ind2 = Math.floor(Math.random() * list.length);\n    }\n\n    let tmpX = list[ind1][0];\n    let tmpY = list[ind1][1];\n\n    list[ind1][0] = list[ind2][0];\n    list[ind1][1] = list[ind2][1];\n\n    list[ind2][0] = tmpX;\n    list[ind2][1] = tmpY;\n}\n\nexport default swap;","import copyList from './copyList'\nimport calcDistance from './calcDistance'\nimport swap from './swap'\n\nconst random = (circles, iterations) => {\n    const MAX_ITER = iterations;\n    let pathList = [];\n    let bestPath = [];\n    let distanceList = [];\n    let bestDistance = -1;\n\n    let tmpPath = copyList(circles);\n\n    for (let i = 0; i < MAX_ITER; i++) {\n        swap(tmpPath);\n\n        //console.log(tmpPath);\n        pathList.push(tmpPath);\n        distanceList.push(calcDistance(tmpPath));\n        if (distanceList[i] < bestDistance || bestDistance === -1) {\n            bestDistance = distanceList[i];\n            bestPath = tmpPath;\n        }\n\n        tmpPath = copyList(circles);\n    }\n\n    pathList.push(bestPath);\n    distanceList.push(bestDistance);\n    //console.log(pathList);\n\n    return [pathList, distanceList];\n\n}\n\nexport default random","const acceptanceProbability = (currentEnergy, newEnergy, temperature) => {\n    if (newEnergy < currentEnergy) {\n        return 1.0;\n    }\n    \n    //currentEnergy < newEnergy\n\n    return Math.exp( (currentEnergy - newEnergy) / temperature);\n    //return Math.exp(-(newEnergy - currentEnergy) / temperature);\n    //return 1 / (1 + Math.exp((newEnergy - currentEnergy) / temperature));\n}\n\nexport default acceptanceProbability;","import copyList from './copyList'\nimport calcDistance from './calcDistance'\nimport acceptanceProbability from './acceptanceProbability'\nimport swap from './swap';\n\nconst simulatedAnnealing = (list) => {\n    let T = 100000;\n    const coolingRate = 0.05;\n    let paths = [];\n    let distances = [];\n\n    let currentEnergy = calcDistance(list);\n    let currentPath = copyList(list);\n\n    paths.push(list);\n    distances.push(currentEnergy);\n\n    var bestEnergy = currentEnergy;\n    var bestPath = list;\n\n    while (T > 0.01) {\n\n        let newPath = copyList(currentPath);\n\n        swap(newPath);\n\n        let newEnergy = calcDistance(newPath);\n\n        if (acceptanceProbability(currentEnergy, newEnergy, T) > Math.random()) {\n            currentPath = copyList(newPath);\n            paths.push(currentPath);\n            distances.push(newEnergy);\n\n            currentEnergy = newEnergy;\n\n            if (currentEnergy < bestEnergy) {\n                bestEnergy = currentEnergy;\n                bestPath = currentPath;\n            }\n        }\n\n\n        T = T * (1 - coolingRate);\n    }\n\n    paths.push(bestPath);\n    distances.push(bestEnergy);\n\n    //console.log(paths);\n    //console.log(\"Distances = :\");\n    //console.log(distances);\n\n    return [paths, distances];\n}\n\nexport default simulatedAnnealing;","const shuffle = (list) => {\n    for (let i = 0; i < list.length; i++) {\n        let swapInd = Math.floor(Math.random() * list.length);\n\n        while (swapInd === i) {\n            swapInd = Math.floor(Math.random() * list.length);\n        }\n\n        let tmp = list[i];\n        list[i] = list[swapInd];\n        list[swapInd] = tmp;\n    }\n}\n\nexport default shuffle;","import shuffle from './shuffle'\nimport copyList from './../copyList'\nimport calcDistance from '../calcDistance';\n\nexport default class Path {\n    constructor(path) {\n        let pathCopy = copyList(path);\n        shuffle(pathCopy);\n\n        this.path = pathCopy;\n        this.calcFitness();\n    }\n\n    calcFitness() {\n        this.fitness =  1 / (1 + calcDistance(this.path));\n    }\n}","import Path from './Path'\n\nexport default class Population {\n    constructor(path) {\n        let paths = [];\n\n        for (let i = 0; i < 100; i++) {\n            paths.push(new Path(path));\n        }\n\n        this.paths = paths;\n\n        //console.log(paths);\n    }\n\n    getFittest() {\n        let fittest = this.paths[0];\n        let fittestValue = fittest.fitness;\n\n        for (let i = 1; i < this.paths.length; i++) {\n            if (this.paths[i].fitness > fittestValue) {\n                fittestValue = this.paths[i].fitness;\n                fittest = this.paths[i];\n            }\n        }\n\n        return fittest;\n    }\n\n    normalizeFitness() {\n        let sum = 0;\n\n        for (let i = 0; i < this.paths.length; i++) {\n            sum += this.paths[i].fitness;\n        }\n\n        for (let i = 0; i < this.paths.length; i++) {\n            this.paths[i].fitness = this.paths[i].fitness / sum;\n        }\n    }\n}","import copyList from './../copyList'\n\nconst pickOne = (paths) => {\n    var index = 0;\n    var r = Math.random();\n\n    while (r > 0) {\n        r = r - paths[index].fitness;\n        index++;\n    }\n\n    index--;\n\n    var newPath = copyList(paths[index].path);\n\n    return newPath;\n}\n\nexport default pickOne;","import Population from \"./Population\"\nimport swap from \"../swap\"\nimport calcDistance from \"../calcDistance\"\nimport pickOne from './pickOne'\nimport copyList from \"../copyList\";\n\nexport default class GA {\n    constructor(circles) {\n        this.eliteOffset = 5;\n        this.population = new Population(circles);\n        this.population.normalizeFitness();\n        this.sortByFitness();\n    }\n\n    evole(generations) {\n        let paths = [];\n        let distances = [];\n\n        let bestEverDist = 10000000000;\n        let bestEverPath = [];\n\n        for (let i = 0; i < generations; i++) {\n            let bestDist = 100000000000;\n            let bestPath = [];\n\n            for (let j = 0; j < this.population.paths.length; j++) {\n                let curDist = calcDistance(this.population.paths[j].path);\n\n                if (curDist < bestDist) {\n                    bestDist = curDist;\n                    bestPath = this.population.paths[j].path;\n                }\n\n                if (curDist < bestEverDist) {\n                    bestEverDist = curDist;\n                    bestEverPath = this.population.paths[j].path;\n                }\n            }\n            \n\n            paths.push(bestPath);\n            distances.push(bestDist);\n\n            this.nextGeneration();\n        }\n\n        paths.push(bestEverPath);\n        distances.push(bestEverDist);\n\n        return [paths, distances];\n    }\n\n    nextGeneration() {\n        var newPopulation = [];\n\n        for (let i = 0; i < this.eliteOffset; i++) {\n            newPopulation.push(copyList(this.population.paths[i].path));\n        }\n\n        for (let i = 0; i < this.population.paths.length - this.eliteOffset; i++) {\n            \n            var order = pickOne(this.population.paths);\n\n            if (Math.random() > 0.8) {\n                var orderTwo = pickOne(this.population.paths);\n\n                order = this.crossOver(order, orderTwo);\n            }\n            else {\n                swap(order);\n            }\n            \n            newPopulation.push(order);\n        }\n\n        for (let i = 0; i < this.population.paths.length; i++) {\n            this.population.paths[i].path = newPopulation[i];\n            this.population.paths[i].calcFitness();\n        }\n\n        this.population.normalizeFitness();\n        this.sortByFitness();\n    }\n\n    crossOver(orderA, orderB) {\n        let ind1 = Math.floor(Math.random() * orderA.length);\n        let ind2 = Math.floor(Math.random() * orderA.length);\n        var cross = [];\n\n        while (ind2 === ind1) {\n            ind2 = Math.floor(Math.random() * orderA.length);\n        }\n\n        if (ind1 > ind2) {\n            let tmp = ind2;\n            ind2 = ind1;\n            ind1 = tmp;\n        }\n\n        let visited = new Set();\n        for (let i = ind1; i < ind2; i++) {\n            cross.push(orderA[i]);\n            visited.add(\"\" + orderA[i]); //new\n        }\n\n        for (let i = 0; i < orderB.length; i++) {\n            if (!visited.has(\"\" + orderB[i])) {\n                cross.push(orderB[i]);\n                visited.add(\"\" + orderB[i]);\n            }\n        }\n\n        for (let i = 0; i < orderA.length; i++) {\n            if (!visited.has(\"\" + orderA[i])) {\n                cross.push(orderA[i]);\n            }\n        }\n\n        return cross;\n    }\n\n    sortByFitness() {\n        const population = this.population;\n\n        for (let i = 0; i < population.paths.length - 1; i++) {\n            for (let j = i + 1; j < population.paths.length; j++) {\n                if (population.paths[j].fitness > population.paths[i].fitness) {\n                    let tmpPath = population.paths[i].path;\n                    let tmpFitness = population.paths[i].fitness;\n\n                    population.paths[i].path = population.paths[j].path;\n                    population.paths[i].fitness = population.paths[j].fitness;\n\n                    population.paths[j].path = tmpPath;\n                    population.paths[j].fitness = tmpFitness;\n\n                }\n            }\n        }\n    }\n}","import React from 'react';\nimport ReactDOM, { render } from 'react-dom';\n\nconst modalRoot = document.getElementById(\"modal-root\");\n\n\nclass Modal extends React.Component {\n    render() {\n        return ReactDOM.createPortal(\n            <div\n            style={{\n            position: \"absolute\",\n            top: \"0\",\n            bottom: \"0\",\n            left: \"0\",\n            right: \"0\",\n            display: \"grid\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            backgroundColor: \"rgba(0,0,0,0.3)\"\n            }}\n        >\n            <div\n            style={{\n                padding: 20,\n                background: \"#fff\",\n                borderRadius: \"2px\",\n                display: \"inline-block\",\n                minHeight: \"800px\",\n                margin: \"1rem\",\n                position: \"relative\",\n                minWidth: \"800px\",\n                boxShadow: \"0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23)\",\n                justifySelf: \"center\"\n            }}\n            >\n            {this.props.statement}\n            <hr />\n            <p>Place destinations on the canvas to the left and then select an algorithm!</p>\n            <button onClick={this.props.onClose}>Close</button>\n            </div>\n        </div>,\n        modalRoot\n        );\n    }\n}\n\nexport default Modal;","import React from 'react';\nimport './App.css';\nimport drawCircle from './Animations/drawCircle'\nimport clearCanvas from './Animations/clearCanvas'\nimport animatePath from './Animations/animatePath'\nimport random from './Algorithms/random'\nimport swap from './Algorithms/swap'\nimport simulatedAnnealing from './Algorithms/simulatedAnnealing'\nimport GA from './Algorithms/Genetic_Algorithm/GA'\nimport Modal from './Modal'\n//import Button from 'react-bootstrap/Button'\n\n\n//TODO: set animation time to be fixed to some time: calculating how many paths there are in the list.\n//TODO: Save the top 5 paths from previous generation.\n\nclass App extends React.Component {\n    state = {\n        circles : [],\n        bestPath : [],\n        bestDistance : -1,\n        distance : null,\n        drawing: false,\n        showTutorial: true\n    }\n\n    /**\n     * \n     * @param {int} x   x coordinate of the circle\n     * @param {int} y   y coordinate of the circle\n     */\n    addCircle(x, y) {\n        let circlesCopy = this.state.circles.slice();\n        circlesCopy.push([x, y]);\n\n        //shuffle list of circle locations\n        swap(circlesCopy);\n\n        this.setState({circles : circlesCopy});\n        drawCircle(this.refs.canvas, x, y);\n    }\n\n    /**\n     * @param {double} currentDistance  distance of the current path\n     * @param {double} bestDistance     distance of the best path\n     */\n    setDistances = (currentDistance, bestDistance) => {\n        this.setState({distance : currentDistance,\n                    bestDistance : bestDistance});\n        \n    }\n    \n    /**\n     * Resets state and clears the canvas\n     */\n    resetState() {\n        if (this.state.drawing === true) {\n            alert('Wait for animation to finish before resetting!');\n            return;\n        }\n\n        clearCanvas(this.refs.canvas);\n        clearCanvas(this.refs.canvas2);\n\n        this.setState({circles : [], \n                    bestDistance : -1,\n                    distance : null,\n                    drawing : false}\n                    );\n    }\n\n    /**\n     * Changes the state of drawing to false for when the animations are finished.\n     */\n    doneDrawing = () => {\n        this.setState({drawing : false});\n    }\n\n\n    /**\n     * Method to close the tutorial window\n     */\n    closeTutorial = () => {\n        this.setState({showTutorial : false});\n    }\n\n    /**\n     * Method that handles which algorithm to use to solve the TSP.\n     * \n     * @param {String} algorithm    Name of the algorithm to be used\n     */\n    selectAlgorithm(algorithm) {\n\n        //check list size\n        if (this.state.circles.length < 2) {\n            alert('Must contain at least 2 or more circles to find paths');\n            return;\n        }\n        else if (this.state.drawing === true) {\n            alert('Wait for animation to finish before selecting another algorithm!');\n            return;\n        }\n\n        clearCanvas(this.refs.canvas2);\n        this.setState({drawing : true});\n\n        //reset distances\n        this.setDistances(null, -1);\n\n        var paths, distances;\n        \n        if (algorithm === \"SA\") {\n            [paths, distances] = simulatedAnnealing(this.state.circles);\n        }\n        else if (algorithm === \"randomSwap\") {\n            [paths, distances] = random(this.state.circles, 50);\n        }\n        else if (algorithm === \"GA\") {\n            let ga = new GA(this.state.circles);\n            [paths, distances] = ga.evole(100);\n        }\n\n        animatePath(this.refs.canvas, this.refs.canvas2, paths, distances, this.setDistances, this.doneDrawing);\n    }\n\n    /**\n     * Render method\n     */\n    render() {\n        var best;\n\n\n        if (this.state.bestDistance === -1){\n            best = \"\";\n        }\n        else {\n            best = this.state.bestDistance;\n        }\n\n        return (\n            <div className=\"container\">\n                <div>\n                    <canvas ref=\"canvas\" width={880} height={800}\n                            onClick={(e) => this.addCircle(e.clientX, e.clientY)}\n                    />\n\n                    <div id=\"div2\">\n                        <p>Distance Graph:</p>\n                        <canvas ref=\"canvas2\" id=\"distancegraph\" width={900} height={720}\n                        />\n                    </div>\n                </div>\n\n                <div id=\"utilities\">\n                    <div id=\"buttons\">\n                        <button className=\"btn\" onClick={() => this.selectAlgorithm('randomSwap')}>Random Swap</button>\n                        <button className=\"btn\" onClick={() => this.selectAlgorithm('SA')}>Simulated Annealing</button>\n                        <button className=\"btn\" onClick={() => this.selectAlgorithm('GA')}>Genetic Algorithm</button>\n                        <button className=\"btn\" onClick={() => this.resetState()}>Reset</button>\n                    </div>\n\n                    <div id=\"scoreInfo\">\n                        <p className=\"scoreboard\">Current Distance: {this.state.distance}</p>\n                        <p className=\"scoreboard\">Best Distance: {best}</p>\n                    </div>\n                    \n                </div>\n                \n\n                {this.state.showTutorial ? (\n                    <Modal onClose={this.closeTutorial} statement={\"Tutorial:\"}/>\n                ) : null}\n            </div>\n            \n\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}